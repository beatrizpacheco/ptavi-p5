 Creación de repositorio para la práctica

1. Con el navegador, dirígete al repositorio ptavi-p5 en la cuenta del profesor en GitHub1 y realiza un fork, de manera que consigas tener una copia del repositorio en tu cuenta de GitHub. Clona el repositorio que acabas de crear a local para poder editar los archivos. Trabaja a partir de ahora en ese repositorio, sincronizando los cambios que vayas realizando.

Como tarde al final de la práctica, deberás realizar un push para subir tus cambios a tu repositorio en GitHub. En esta práctica, al contrario que con las demás, se recomienda hacer frecuentes commits, pero el push al final.

================================================================================
================================================================================

Análisis de una sesión SIP

Se ha capturado una sesión SIP (archivo sip.cap.gz), que se puede abrir con Wireshark2. Se pide rellenar las cuestiones que se plantean en este guión en el fichero p5.txt que encontrarás también en el repositorio.

2. Observa que las tramas capturadas corresponden a una sesión SIP con Ekiga, un cliente de VoIP para GNOME. Responde a las siguientes cuestiones:
 ** ¿Cuántos paquetes componen la captura?
 954 PAQUETES
 ** ¿Cuánto tiempo dura la captura?
 56 SEGUNDOS
 ** ¿Qué IP tiene la máquina donde se ha efectuado la captura? ¿Se trata de una IP pública o de una IP privada? ¿Por qué lo sabes?
 192.168.1.34. ES UNA IP PRIVADA. POR QUE COMIENZA CON EL 192.168. 


3. Antes de analizar las tramas, mira las estadísticas generales que aparecen en el menú de Statistics. En el apartado de jerarquía de protocolos (Protocol Hierarchy) se puede ver el porcentaje del tráfico correspondiente al protocolo TCP y UDP.
 ** ¿Cuál de los dos es mayor? ¿Es esto consistente con una aplicación que transmite en tiempo real?
 HAY MÁS PAQUETES UDP 96.2%(918) QUE DE TCP 2.1%(20). PARA APLICACIONES EN TIEMPO REAL SE USA MÁS UDP, POR TANTO SÍ ES NORMAL
 ** ¿Qué otros protocolos podemos ver en la jerarquía de protocolos? ¿Cuales son señal y cuales ruido?
 DENTRO DE UDP VEMOS SIP, RTP, RTCP, DNS, Y DENTRO DE TCP HTTP. TAMBIÉN EN LA CAPTURA VEMOS CLASSIC-STUN, ARP, H.261, ICMP..
 LOS DNS SÓLO SON PARA SABER EL NOMBRE A PARTIR DE UNA IP, EL ARP PARA SABER QUIÉN ES UNA DETERMINADA IP, LOS ICMP SON MENSAJES COMO QUE A UN PUERTO NO SE PUEDE ACCEDER


4. Observa por encima el flujo de tramas en el menú de Statistics en IO Graphs. La captura que estamos viendo incluye desde la inicialización (registro) de la aplicación hasta su finalización, con una llamada entremedias.
 ** Filtra por sip para conocer cuándo se envían paquetes SIP. ¿En qué segundos tienen lugar esos envíos?
 EL REGISTER EN EL SEGUNDO 7, EL INVITE EN EL SEGUNDO 14 Y 16, EL BYE EN EL 38 Y 39, Y SE DA DE BAJA EN EL 55
 ** Y los paquetes con RTP, ¿cuándo se envían?
LOS MENSAJES RTP SE ENVÍAN ENTRE EL INVITE Y EL BYE, ENTRE LOS SEGUNDOS 16 Y 38


[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

5. Analiza las dos primeras tramas de la captura.
 ** ¿Qué servicio es el utilizado en estas tramas?
 DNS, PARA SABER QUIEN ES EKIGA
 **¿Cuál es la dirección IP del servidor de nombres del ordenador que ha lanzado Ekiga?
 LA 80.58.61.250, QUE ES QUIEN HA CONTESTADO EL DNS
 **¿Qué dirección IP (de ekiga.net) devuelve el servicio de nombres?
  RESPONDE LA DIRECCIÓN 86.64.162.35
  --> EL PAQUETE 3 ES LA RESOLUCIÓN INVERSA DE DNS, A LA CUAL RESPONDE QUE NO TIENE ESE SERVICIO


6. A continuación, hay más de una docena de tramas TCP/HTTP.
 ** ¿Podrías decir la URL que se está pidiendo?
 EKIGA.NET/IP
 ** ¿Qué user agent (UA) la está pidiendo?
 EKIGA
 ** ¿Qué devuelve el servidor?
 DEVUELVE LA DIRECCIÓN IP 83.36.48.212, QUE ES MI IP PÚBLICA, CÓMO ME VEN DESDE FUERA
 ** Si lanzamos el navegador web, por ejemplo, Mozilla Firefox, y vamos a la misma URL, ¿qué recibimos? ¿Qué es, entonces, lo que está respondiendo el servidor?
 LA DIRECCIÓN IP 212.128.255.8, QUE ES NUESTRA DIRECCIÓN IP EN EL LABORATORIO
 LO QUE RESPONDE EL SERVIDOR ES LA IP CON LA QUE ME VEN DESDE FUERA


7. Hasta la trama 45 se puede observar una secuencia de tramas del protocolo STUN.
 ** ¿Por qué se hace uso de este protocolo?
 STUN Es un protocolo de red del tipo cliente/servidor que permite a clientes NAT encontrar su dirección IP pública, el tipo de NAT en el que se encuentra y el puerto de Internet asociado con el puerto local a través de NAT. Esta información es usada para configurar una comunicación UDP entre dos hosts que se encuentren tras enrutadores NAT
 **¿Podrı́as decir si estamos tras un NAT?
 ESTAMOS DETRÁS DE UN NAT PORQUE TENEMOS IP PRIVADA, ADEMÁS PODEMOS SABERLO PORQUE NOSOTROS TENEMOS UNA IP, Y DESDE FUERA NOS ESTÁN VIENDO CON OTRA IP. LA NUESTRA ES 192.168.1.34, Y DESDE FUERA NOS VEN CON LA 83.36.48.212


8. La trama 46 es la primera trama SIP. En un entorno como el de Internet, lo habitual es desconocer la dirección IP de la otra parte al realizar una llamada. Por eso, todo usuario registra su localización en un servidor Registrar. El Registrar guarda información sobre los usuarios en un servidor de localización que puede ser utilizado para localizar usuarios.
 ** ¿Qué dirección IP tiene el servidor Registrar?
 86.64.162.35
 ** ¿A qué puerto (del servidor Registrar) se envían los paquetes SIP?
 AL PUERTO 5060
 ** ¿Qué método SIP utiliza el UA para registrarse?
 EL MÉTODO REGISTER
 ** Además de REGISTER, ¿qué instrucciones SIP entiende el UA?
 INVITE,ACK,OPTIONS,BYE,CANCEL,NOTIFY,REFER,MESSAGE



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

9. Fijémonos en las tramas siguientes a la número 46:
 ** ¿Se registra con éxito en el primer intento?

 ** ¿Cómo sabemos si el registro se ha realizado correctamente o no?
 
 ** ¿Podrías identificar las diferencias entre el primer intento y el segundo de registro? (fíjate en el tamaño de los paquetes y mira a qué se debe el cambio)
 
 ** ¿Cuánto es el valor del tiempo de expiración de la sesión? Indica las unidades.
 


10. Una vez registrados, podemos efectuar una llamada. Vamos a probar con el servicio de eco de Ekiga que nos permite comprobar si nos hemos conectado correctamente. El servicio de eco tiene la dirección sip:500@ekiga.net. Veamos el INVITE de cerca.
 ** ¿Puede verse el nombre del que efectúa la llamada, así como su dirección SIP?
 
 ** ¿Qué es lo que contiene el cuerpo de la trama? ¿En qué formato/protocolo está?
 
 ** ¿Tiene éxito el primer intento? ¿Cómo lo sabes?
 
 ** ¿En qué se diferencia el segundo INVITE más abajo del primero? ¿A qué crees que se debe esto?
 


11. Una vez conectado, estudia el intercambio de tramas.
 ** ¿Qué protocolo(s) se utiliza(n)? ¿Para qué sirven estos protocolos?
 
 ** ¿Cuál es el tamaño de paquete de los mismos?
 
 ** ¿Se utilizan bits de padding?
 
 ** ¿Cuál es la periodicidad de los paquetes que se envían?
 
 ** ¿Cuántos bits/segundo estamos enviando?
 



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

12. Vamos a ver más a fondo el intercambio RTP. En Telephony hay una opción RTP. Empecemos mirando los flujos RTP.
 ** ¿Cuántos flujos hay? ¿por qué?
 
 ** ¿Cuántos paquetes se pierden?
 
 ** ¿Cuál es el valor máximo del delta? ¿Y qué es lo que significa el valor de delta?
 
 ** ¿Cuáles son los valores de jitter (medio y máximo)? ¿Qué quiere decir eso? ¿Estamos ante una conversación de calidad?
 


13. Elige un paquete RTP de audio. Analiza el flujo de audio en Telephony -> RTP -> Stream Analysis.
 ** ¿Cuánto valen el delta y el jitter para el primer paquete que ha llegado?
 
 ** ¿Podemos saber si éste es el primer paquete que nos han enviado?
 
 ** Los valores de jitter son menores de 10ms hasta un paquete dado. ¿Cuál?
 
 ** ¿A qué se debe el cambio tan brusco del jitter?
 
 ** ¿Es comparable este cambio con el tiempo desde la recepción del paquete anterior? ¿Por qué?
 
 ** ¿Cuál es la dependencia entre el tiempo transcurrido desde el paquete anterior y el valor de jitter?
 


14. En Telephony selecciona el menú VoIP calls. Verás que se lista la llamada de voz IP capturada en una ventana emergente. Selecciona esa llamada y pulsa el botón Graph.
 ** ¿Cuánto dura la conversación?
 
 ** ¿Cuáles son sus SSRC? ¿Por qué hay varios SSRCs? ¿Hay CSRCs?
 


15. Identifica la trama donde se finaliza la conversación.
 ** ¿Qué método SIP se utiliza?
 
 ** ¿En qué trama(s)?
 
 ** ¿Por qué crees que se envía varias veces?
 


16. Finalmente, se cierra la aplicación de VozIP.
 ** ¿Por qué aparece una instrucción SIP del tipo REGISTER?
 
 ** ¿En qué trama sucede esto?
 
 ** ¿En qué se diferencia con la instrucción que se utilizó con anterioridad (al principio de la sesión)?
 



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

================================================================================
================================================================================

Captura de una sesión SIP

17. Dirı́gete a la web http://www.ekiga.net con el navegador y créate una cuenta. Lanza Ekiga, y configúralo con los datos de la cuenta que te acabas de crear. Comprueba que estás conectado (En la barra al final de la ventana podrás ver “Connected”). Al terminar, cierra completamente Ekiga.

18. Captura una sesión SIP de una conversación con el número SIP sip:9999@qxip.net. Recuerda que has de comenzar a capturar tramas antes de arrancar Ekiga para ver todo el proceso.

19. Observa las diferencias en el inicio de la conversación entre el entorno del laboratorio y el del ejercicio anterior:
 ** ¿Es necesario el uso de DNS y STUN? ¿Por qué?
 
 ** ¿Son diferentes el registro y la descripción de la sesión?
 


20. Identifica las diferencias existentes entre esta conversación y la conversación anterior:
 ** ¿Cuántos flujos tenemos?
 
 ** ¿Cuál es su periodicidad?
 
 ** ¿Cuánto es el valor máximo del delta y los valores medios y máximo del jitter?
 
 ** ¿Podrías reproducir la conversación desde Wireshark? ¿Cómo? Comprueba que poniendo un valor demasiado pequeño para el buffer de jitter, la conversación puede no tener la calidad necesaria.
 
 ** ¿Sabrías decir qué tipo de servicio ofrece sip:9999@qxip.net?
 



[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]

21. Filtra por los paquetes SIP de la captura y guarda únicamente los paquetes SIP como p5.pcapng. Abre el fichero guardado para cerciorarte de que lo has hecho bien. Deberás guardarlo en un archivo de nombre p5.pcapng y añadirlo al repositorio.

[Al terminar el ejercicio es recomendable hacer commit de los ficheros modificados]
[Al terminar la práctica, realiza un push para sincronizar tu repositorio GitHub]

